<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="esp__at_8h" kind="file" language="C++">
    <compoundname>esp_at.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="yes">esp_partition.h</includes>
    <includes local="yes">esp_wifi.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>stdint.h</label>
      </node>
      <node id="0">
        <label>/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h</label>
        <link refid="esp__at_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>esp_wifi.h</label>
      </node>
      <node id="3">
        <label>esp_partition.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structesp__at__cmd__struct" prot="public">esp_at_cmd_struct</innerclass>
    <innerclass refid="structesp__at__device__ops__struct" prot="public">esp_at_device_ops_struct</innerclass>
    <innerclass refid="structesp__at__custom__net__ops__struct" prot="public">esp_at_custom_net_ops_struct</innerclass>
    <innerclass refid="structesp__at__custom__ble__ops__struct" prot="public">esp_at_custom_ble_ops_struct</innerclass>
    <innerclass refid="structesp__at__custom__ops__struct" prot="public">esp_at_custom_ops_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="esp__at_8h_1af8031548e236a2300f19fd76fd3efb41" prot="public" static="no">
        <name>ESP_AT_ERROR_NO</name>
        <param><defname>subcategory</defname></param>
        <param><defname>extension</defname></param>
        <initializer>((ESP_AT_MODULE_NUM &lt;&lt; 24) | ((subcategory) &lt;&lt; 16) | (extension))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="136" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a259dbea912a36043a88b75da4ad8901a" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_OK</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_OK,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="139" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a6f3e7a40181fe8c5d2816a664d823608" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_NON_FINISH</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_NO_TERMINATOR,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="140" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1ab0e0620aa70e9d12311b2bfeb2d760a5" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_NOT_FOUND_AT</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_NO_AT,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="141" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a8f1899efb4513b6a5e90cde7f527651a" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_PARA_LENGTH</name>
        <param><defname>which_para</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_LENGTH_MISMATCH,which_para)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="142" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1ae7c83203d369a7400e283b01b57feadc" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_PARA_TYPE</name>
        <param><defname>which_para</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_TYPE_MISMATCH,which_para)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="143" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1aa234dfbba006c9dc87ced249a1e2158c" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_PARA_NUM</name>
        <param><defname>need</defname></param>
        <param><defname>given</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_NUM_MISMATCH,(((need) &lt;&lt; 8) | (given)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="144" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a508e59fb5cafb803535ac0f859c7872c" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_PARA_INVALID</name>
        <param><defname>which_para</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_INVALID,which_para)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="145" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a70cb6936927e61531e0ba41d0603a641" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_PARA_PARSE_FAIL</name>
        <param><defname>which_para</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_PARSE_FAIL,which_para)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="146" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a9c8d9872d549273c852a9f9db25b5af0" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_CMD_UNSUPPORT</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_UNSUPPORT_CMD,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="147" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a3ed364e538caf8bfc639c678a46ad45c" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_CMD_EXEC_FAIL</name>
        <param><defname>result</defname></param>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_EXEC_FAIL,result)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="148" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1aef0b0469702b54290fef80da946a9dfd" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_CMD_PROCESSING</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_PROCESSING,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="149" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="esp__at_8h_1a440409063d7e5ae85c28a83ad93fc3d6" prot="public" static="no">
        <name>ESP_AT_CMD_ERROR_CMD_OP_ERROR</name>
        <initializer>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_OP_ERROR,0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="150" column="9" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="esp__at_8h_1ae239ee1d0e89cc4b476825863f8c9121" prot="public" static="no">
        <name>esp_at_status_type</name>
        <enumvalue id="esp__at_8h_1ae239ee1d0e89cc4b476825863f8c9121a82cc3f06709dc13b0fbfb27ef6de38d3" prot="public">
          <name>ESP_AT_STATUS_NORMAL</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Normal mode.Now mcu can send AT command </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1ae239ee1d0e89cc4b476825863f8c9121aa0dc026217e2705fb04c150b51905a6f" prot="public">
          <name>ESP_AT_STATUS_TRANSMIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transparent Transmition mode </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>esp_at_status some custom function interacting with AT </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="85" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="esp__at_8h_1a5a70d5ff7457faee5757da901ea64305" prot="public" static="no">
        <name>esp_at_module</name>
        <enumvalue id="esp__at_8h_1a5a70d5ff7457faee5757da901ea64305a120a6ad70e86aef9bb0f85ea65040b0d" prot="public">
          <name>ESP_AT_MODULE_NUM</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>module number,Now just AT module </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="112" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="112" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="esp__at_8h_1adba31fc0848c867302c1389d6a719901" prot="public" static="no">
        <name>esp_at_error_code</name>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ab65c93b365084d675c9c8d2cb85c5aee" prot="public">
          <name>ESP_AT_SUB_OK</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>OK </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ad878aae06ef0af5bf7459d4e732d28e3" prot="public">
          <name>ESP_AT_SUB_COMMON_ERROR</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901a8ece757353d9b9d754fe7ee3dffdf009" prot="public">
          <name>ESP_AT_SUB_NO_TERMINATOR</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>not end with &quot;\r\n&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901aac490b7434e97cd6dda5dc06829a4752" prot="public">
          <name>ESP_AT_SUB_NO_AT</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>not found AT or at or At or aT </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ad6e0b28873f7e82345fb0892c275d623" prot="public">
          <name>ESP_AT_SUB_PARA_LENGTH_MISMATCH</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>parameter length not match </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901a9f262dfc988438706a55a29a1748ae43" prot="public">
          <name>ESP_AT_SUB_PARA_TYPE_MISMATCH</name>
          <initializer>= 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>parameter length not match </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ac6b5b10f52ea2612d8628f1897142997" prot="public">
          <name>ESP_AT_SUB_PARA_NUM_MISMATCH</name>
          <initializer>= 0x06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>parameter number not match </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901a2172796f23c221f4cee294a77fff49ed" prot="public">
          <name>ESP_AT_SUB_PARA_INVALID</name>
          <initializer>= 0x07</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ad9f84cae5eb8ee91f43e7a94becf5477" prot="public">
          <name>ESP_AT_SUB_PARA_PARSE_FAIL</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>parse parameter fail </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901ab3cd1c1b8a2a49a2111c57a512ef64c1" prot="public">
          <name>ESP_AT_SUB_UNSUPPORT_CMD</name>
          <initializer>= 0x09</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901aa30973841455529fae37712f3aa654a0" prot="public">
          <name>ESP_AT_SUB_CMD_EXEC_FAIL</name>
          <initializer>= 0x0A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901a829f94a8131058d90776ede8fa667dd2" prot="public">
          <name>ESP_AT_SUB_CMD_PROCESSING</name>
          <initializer>= 0x0B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>previous command is processing </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1adba31fc0848c867302c1389d6a719901a7ce30c99b5146f6e284e805b9beb4a6f" prot="public">
          <name>ESP_AT_SUB_CMD_OP_ERROR</name>
          <initializer>= 0x0C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>subcategory number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="120" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="120" bodyend="134"/>
      </memberdef>
      <memberdef kind="enum" id="esp__at_8h_1af8af2d682db485f8d3ca6853838eed15" prot="public" static="no">
        <name>esp_at_para_parse_result_type</name>
        <enumvalue id="esp__at_8h_1af8af2d682db485f8d3ca6853838eed15ae6a070918a7f2c0e002b50ab90e06830" prot="public">
          <name>ESP_AT_PARA_PARSE_RESULT_FAIL</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>parse fail,Maybe the type of parameter is mismatched,or out of range </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1af8af2d682db485f8d3ca6853838eed15ad35ac8af622431520e5d2241b0419df0" prot="public">
          <name>ESP_AT_PARA_PARSE_RESULT_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Successful </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1af8af2d682db485f8d3ca6853838eed15a85cfa9d5ea98f3efaa7f75720a4f9fbc" prot="public">
          <name>ESP_AT_PARA_PARSE_RESULT_OMITTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>the parameter is OMITTED. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the result of AT parse </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="157" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="enum" id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6" prot="public" static="no">
        <name>esp_at_result_code_string_index</name>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a63cc60b97b7b2a11809d108bc09008c4" prot="public">
          <name>ESP_AT_RESULT_CODE_OK</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&quot;OK&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a1c30f5cc461064afde3ef331317850c9" prot="public">
          <name>ESP_AT_RESULT_CODE_ERROR</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&quot;ERROR&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a37504afce175cd6df59b09ac788a4043" prot="public">
          <name>ESP_AT_RESULT_CODE_FAIL</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&quot;ERROR&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a1a516fd8efb072698251dead8c2f0895" prot="public">
          <name>ESP_AT_RESULT_CODE_SEND_OK</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&quot;SEND OK&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a496fb3fcab8bcdbb1ea5fd6bcf6b567d" prot="public">
          <name>ESP_AT_RESULT_CODE_SEND_FAIL</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&quot;SEND FAIL&quot; </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a0b1e45202f22d86690a974cd2a27f2f3" prot="public">
          <name>ESP_AT_RESULT_CODE_IGNORE</name>
          <initializer>= 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>response nothing </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a5a500ffd9314f09664017e5ad197a11b" prot="public">
          <name>ESP_AT_RESULT_CODE_PROCESS_DONE</name>
          <initializer>= 0x06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>response nothing </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="esp__at_8h_1a22bb7b8f8b58f81bfd8158f6bebc5fb6a42252d8eaefa3da5fd8d42ba6b844ddb" prot="public">
          <name>ESP_AT_RESULT_CODE_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>the result code of AT command processing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="167" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="167" bodyend="177"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="esp__at_8h_1a72480f0ecf22056058f4e6bab987c018" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* esp_at_port_specific_callback_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>esp_at_port_specific_callback_t</name>
        <briefdescription>
<para>AT specific callback type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="106" column="1" bodyfile="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="esp__at_8h_1a732e0a6924c7bf039f00b29e278a8b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_module_init</definition>
        <argsstring>(uint32_t netconn_max, const uint8_t *custom_version)</argsstring>
        <name>esp_at_module_init</name>
        <param>
          <type>uint32_t</type>
          <declname>netconn_max</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>custom_version</declname>
        </param>
        <briefdescription>
<para>This function should be called only once, before any other AT functions are called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>netconn_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of the link in the at module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>custom_version</parametername>
</parameternamelist>
<parameterdescription>
<para>version information by custom </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a677cbb49c0235cc5d14bbc635ee85095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_at_para_parse_result_type</type>
        <definition>esp_at_para_parse_result_type esp_at_get_para_as_digit</definition>
        <argsstring>(int32_t para_index, int32_t *value)</argsstring>
        <name>esp_at_get_para_as_digit</name>
        <param>
          <type>int32_t</type>
          <declname>para_index</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parse digit parameter from command string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>para_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of parameter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value parsed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>ESP_AT_PARA_PARSE_RESULT_OK : succeed</para></listitem><listitem><para>ESP_AT_PARA_PARSE_RESULT_FAIL : fail</para></listitem><listitem><para>ESP_AT_PARA_PARSE_RESULT_OMITTED : this parameter is OMITTED </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a0a2aa53da4bafc79f4797c14429b7de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_at_para_parse_result_type</type>
        <definition>esp_at_para_parse_result_type esp_at_get_para_as_str</definition>
        <argsstring>(int32_t para_index, uint8_t **result)</argsstring>
        <name>esp_at_get_para_as_str</name>
        <param>
          <type>int32_t</type>
          <declname>para_index</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Parse string parameter from command string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>para_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of parameter </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>the pointer that point to the result.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>ESP_AT_PARA_PARSE_RESULT_OK : succeed</para></listitem><listitem><para>ESP_AT_PARA_PARSE_RESULT_FAIL : fail</para></listitem><listitem><para>ESP_AT_PARA_PARSE_RESULT_OMITTED : this parameter is OMITTED </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a1c7560b380c6cf8b39aedd5ddcdb8bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_port_recv_data_notify_from_isr</definition>
        <argsstring>(int32_t len)</argsstring>
        <name>esp_at_port_recv_data_notify_from_isr</name>
        <param>
          <type>int32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Calling the esp_at_port_recv_data_notify_from_isr to notify at module that at port received data. When received this notice,at task will get data by calling get_data_length and read_data in esp_at_device_ops. This function MUST be used in isr. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1af8013e689a255b20d431a445c37db381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_port_recv_data_notify</definition>
        <argsstring>(int32_t len, uint32_t msec)</argsstring>
        <name>esp_at_port_recv_data_notify</name>
        <param>
          <type>int32_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>msec</declname>
        </param>
        <briefdescription>
<para>Calling the esp_at_port_recv_data_notify to notify at module that at port received data. When received this notice,at task will get data by calling get_data_length and read_data in esp_at_device_ops. This function MUST NOT be used in isr. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>msec</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout time,The unit is millisecond. It waits forever,if msec is portMAX_DELAY.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>true : succeed</para></listitem><listitem><para>false : fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1aa235be59b2fc785fc983aa19cd47abf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_transmit_terminal_from_isr</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_transmit_terminal_from_isr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>terminal transparent transmit mode,This function MUST be used in isr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a50998f4401ba72398671d5e93805f0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_transmit_terminal</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_transmit_terminal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>terminal transparent transmit mode,This function MUST NOT be used in isr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a281caf37e4e40efca6b02bf464e6d3ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_custom_cmd_array_regist</definition>
        <argsstring>(const esp_at_cmd_struct *custom_at_cmd_array, uint32_t cmd_num)</argsstring>
        <name>esp_at_custom_cmd_array_regist</name>
        <param>
          <type>const <ref refid="structesp__at__cmd__struct" kindref="compound">esp_at_cmd_struct</ref> *</type>
          <declname>custom_at_cmd_array</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>cmd_num</declname>
        </param>
        <briefdescription>
<para>regist at command set, which defined by custom, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>custom_at_cmd_array</parametername>
</parameternamelist>
<parameterdescription>
<para>at command set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd_num</parametername>
</parameternamelist>
<parameterdescription>
<para>command number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a0a2cfbb7470e80f8f003a8b86a3b5929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_device_ops_regist</definition>
        <argsstring>(esp_at_device_ops_struct *ops)</argsstring>
        <name>esp_at_device_ops_regist</name>
        <param>
          <type><ref refid="structesp__at__device__ops__struct" kindref="compound">esp_at_device_ops_struct</ref> *</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>regist device operate functions set, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>device operate functions set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a217c21a29ed3ba0b9e8945766d5b47ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_custom_net_ops_regist</definition>
        <argsstring>(int32_t link_id, esp_at_custom_net_ops_struct *ops)</argsstring>
        <name>esp_at_custom_net_ops_regist</name>
        <param>
          <type>int32_t</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type><ref refid="structesp__at__custom__net__ops__struct" kindref="compound">esp_at_custom_net_ops_struct</ref> *</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1adaa10773a4e8be3ae71e5dff7287d0d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_custom_ble_ops_regist</definition>
        <argsstring>(int32_t conn_index, esp_at_custom_ble_ops_struct *ops)</argsstring>
        <name>esp_at_custom_ble_ops_regist</name>
        <param>
          <type>int32_t</type>
          <declname>conn_index</declname>
        </param>
        <param>
          <type><ref refid="structesp__at__custom__ble__ops__struct" kindref="compound">esp_at_custom_ble_ops_struct</ref> *</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1abc99f35f336af51ad6f080218cc0442b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_custom_ops_regist</definition>
        <argsstring>(esp_at_custom_ops_struct *ops)</argsstring>
        <name>esp_at_custom_ops_regist</name>
        <param>
          <type><ref refid="structesp__at__custom__ops__struct" kindref="compound">esp_at_custom_ops_struct</ref> *</type>
          <declname>ops</declname>
        </param>
        <briefdescription>
<para>regist custom operate functions set interacting with AT, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ops</parametername>
</parameternamelist>
<parameterdescription>
<para>custom operate functions set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1acf4c3249211912a7b54115e23543a566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t esp_at_get_version</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_get_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get at module version number, </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>at version bit31~bit24: at main version bit23~bit16: at sub version bit15~bit8 : at test version bit7~bit0 : at custom version </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1af740520bc558ed6ac63e672eb4cddced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_response_result</definition>
        <argsstring>(uint8_t result_code)</argsstring>
        <name>esp_at_response_result</name>
        <param>
          <type>uint8_t</type>
          <declname>result_code</declname>
        </param>
        <briefdescription>
<para>response AT process result, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result_code</parametername>
</parameternamelist>
<parameterdescription>
<para>see esp_at_result_code_string_index </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ad9ff32026e732b2564cafba43992ae12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t esp_at_port_write_data</definition>
        <argsstring>(uint8_t *data, int32_t len)</argsstring>
        <name>esp_at_port_write_data</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>write data into device, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data buffer to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>&gt;= 0 : the real length of the data written</para></listitem><listitem><para>others : fail. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a467a15bf6ef9e95c16e706be0a163bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t esp_at_port_read_data</definition>
        <argsstring>(uint8_t *data, int32_t len)</argsstring>
        <name>esp_at_port_read_data</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>read data from device, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>data length</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>&gt;= 0 : the real length of the data read from device</para></listitem><listitem><para>others : fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a9b85acb7e4eac5b97507b8f65c240542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_port_wait_write_complete</definition>
        <argsstring>(int32_t timeout_msec)</argsstring>
        <name>esp_at_port_wait_write_complete</name>
        <param>
          <type>int32_t</type>
          <declname>timeout_msec</declname>
        </param>
        <briefdescription>
<para>wait for transmitting data completely to peer device, </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout_msec</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout time,The unit is millisecond.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>true : succeed,transmit data completely</para></listitem><listitem><para>false : fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1afedb046a0613516d74e94cf06922e62c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t esp_at_port_get_data_length</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_port_get_data_length</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>get the length of the data received, </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><itemizedlist>
<listitem><para>&gt;= 0 : the length of the data received</para></listitem><listitem><para>others : fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1af7d81dcafe219ce5265316c59992b649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_base_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_base_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at base command set. If not,you can not use AT base command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a6ce1c0b4969d3f5bec05f76e4232c75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_wifi_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_wifi_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at wifi command set. If not,you can not use AT wifi command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1aa3213ac1f889a0f5899953c22dcaa510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_net_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_net_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at net command set. If not,you can not use AT net command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a79d141c224a9e546b4e27e452d8da9a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_mdns_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_mdns_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at mdns command set. If not,you can not use AT mdns command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a491bd50ad5653ef992790f64ad3f7b2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_wps_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_wps_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at wps command set. If not,you can not use AT wps command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a812fe25baa290bd1d819f044ec0e856a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_smartconfig_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_smartconfig_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at smartconfig command set. If not,you can not use AT smartconfig command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a711e039ab7f43c2b57bbd729010cf20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_ping_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_ping_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at ping command set. If not,you can not use AT ping command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a5ccdda800b537cf214494abedc0d8abe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_http_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_http_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at http command set. If not,you can not use AT http command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a076188bb30cb658b03273e2051329d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_mqtt_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_mqtt_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at mqtt command set. If not,you can not use AT mqtt command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a52aa3bd953bbae1b71ad48c0ed08f2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_ble_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_ble_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at ble command set. If not,you can not use AT ble command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a69bd0c6f678785ddb8674cc20b2acf23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_ble_hid_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_ble_hid_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at ble hid command set. If not,you can not use AT ble hid command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="416" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a5fa78adba3d086fab86b57fadd9cfc95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_blufi_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_blufi_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at blufi command set. If not,you can not use AT blufi command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ab9507d276494b98fa40769968999b2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_bt_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_bt_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at bt command set. If not,you can not use AT bt command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1aa9eb58ebb2a7d16915729684bd4d5a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_bt_spp_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_bt_spp_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at bt spp command set. If not,you can not use AT bt spp command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1aeebfe578ac5565874852244095f96089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_bt_a2dp_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_bt_a2dp_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at bt a2dp command set. If not,you can not use AT bt a2dp command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a6d0ed8aa4d2420697b23be14e34f38d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_fs_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_fs_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at fs command set. If not,you can not use AT fs command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="447" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ad0e518deb038dd49b3dff311bedbbc5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_eap_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_eap_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at WPA2 Enterprise AP command set. If not,you can not use AT EAP command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ab9d93972353e2bb013617aed3eecabed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_eth_cmd_regist</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_eth_cmd_regist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>regist at ethernet command set. If not,you can not use AT ethernet command </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ad6fefbfdea1e54e8e547a3d43205af3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool esp_at_custom_cmd_line_terminator_set</definition>
        <argsstring>(uint8_t *terminator)</argsstring>
        <name>esp_at_custom_cmd_line_terminator_set</name>
        <param>
          <type>uint8_t *</type>
          <declname>terminator</declname>
        </param>
        <briefdescription>
<para>Set AT command terminator, by default, the terminator is &quot;\r\n&quot; You can change it by calling this function, but it just supports one character now. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terminator</parametername>
</parameternamelist>
<parameterdescription>
<para>the line terminator</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>true : succeed,transmit data completely</para></listitem><listitem><para>false : fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a7eea3f19435996c615c33305e52cc96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* esp_at_custom_cmd_line_terminator_get</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_custom_cmd_line_terminator_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get AT command line terminator,by default, the return string is &quot;\r\n&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the command line terminator </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1ac9c2b6650b2a2f55d1b5901d1e2eaa00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const esp_partition_t *</type>
        <definition>const esp_partition_t* esp_at_custom_partition_find</definition>
        <argsstring>(esp_partition_type_t type, esp_partition_subtype_t subtype, const char *label)</argsstring>
        <name>esp_at_custom_partition_find</name>
        <param>
          <type>esp_partition_type_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>esp_partition_subtype_t</type>
          <declname>subtype</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
<para>Find the partition which is defined in at_customize.csv. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the partition </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the subtype of the partition </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>Partition label</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to esp_partition_t structure, or NULL if no partition is found. This pointer is valid for the lifetime of the application </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="488" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a4b84221add6f9eb4f26dcbb7332480e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_port_enter_specific</definition>
        <argsstring>(esp_at_port_specific_callback_t callback)</argsstring>
        <name>esp_at_port_enter_specific</name>
        <param>
          <type>esp_at_port_specific_callback_t</type>
          <declname>callback</declname>
        </param>
        <briefdescription>
<para>Set AT core as specific status, it will call callback if receiving data. for example: </para>        </briefdescription>
        <detaileddescription>
<para>static void wait_data_callback (void) { xSemaphoreGive(sync_sema); }</para><para>void process_task(void* para) { vSemaphoreCreateBinary(sync_sema); xSemaphoreTake(sync_sema,portMAX_DELAY); esp_at_port_write_data((uint8_t *)&quot;&gt;&quot;,strlen(&quot;&gt;&quot;)); esp_at_port_enter_specific(wait_data_callback); while(xSemaphoreTake(sync_sema,portMAX_DELAY)) { len = esp_at_port_read_data(data, data_len); TODO: } } <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>which will be called when received data from AT port </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1aaa90a76076c3c6f459cb481f86178c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void esp_at_port_exit_specific</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_port_exit_specific</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exit AT core as specific status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="527" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a058c2c29b4b108b5603a06ce975d6741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* esp_at_get_current_cmd_name</definition>
        <argsstring>(void)</argsstring>
        <name>esp_at_get_current_cmd_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get current AT command name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="esp__at_8h_1a23e28cdf7b6568eded923058f7153763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t esp_at_wifi_event_handler</definition>
        <argsstring>(void *ctx, system_event_t *event)</argsstring>
        <name>esp_at_wifi_event_handler</name>
        <param>
          <type>void *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>system_event_t *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Wi-Fi event handler callback, which used in AT core. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>reserved for user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>event type defined in this file</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>ESP_OK: succeed</para></listitem><listitem><para>others: fail </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h" line="544" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>ESPRESSIF<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>&lt;ESPRESSIF<sp/>SYSTEMS<sp/>(SHANGHAI)<sp/>PTE<sp/>LTD&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted<sp/>for<sp/>use<sp/>on<sp/>ESPRESSIF<sp/>SYSTEMS<sp/>ESP32<sp/>only,<sp/>in<sp/>which<sp/>case,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>is<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ESP_AT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__ESP_AT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_partition.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_wifi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structesp__at__cmd__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="39" refid="structesp__at__cmd__struct_1afdee95aa3b99feb5915afdcc60d1de2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structesp__at__cmd__struct_1afdee95aa3b99feb5915afdcc60d1de2d" kindref="member">at_cmdName</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="structesp__at__cmd__struct_1ad2fa8d3b92dcdcd82bb25e018145f040" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>(*at_testCmd)(uint8_t<sp/>*cmd_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41" refid="structesp__at__cmd__struct_1a3904214951ad4e3525a6443ba97d44f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>(*at_queryCmd)(uint8_t<sp/>*cmd_name);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="structesp__at__cmd__struct_1a02b35b5dc160967f01b063e337c19d6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>(*at_setupCmd)(uint8_t<sp/>para_num);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="structesp__at__cmd__struct_1a735508bf57706bd56f1f69bc6023db63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>(*at_exeCmd)(uint8_t<sp/>*cmd_name);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}<sp/><ref refid="structesp__at__cmd__struct" kindref="compound">esp_at_cmd_struct</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structesp__at__device__ops__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52" refid="structesp__at__device__ops__struct_1a43d8f898f0de3c42743c42e606a2b4df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>(*read_data)<sp/>(uint8_t<sp/>*data,<sp/>int32_t<sp/>len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="structesp__at__device__ops__struct_1ad519ae81b7d312cfc02c2382fd32db4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>(*write_data)(uint8_t<sp/>*data,<sp/>int32_t<sp/>len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="structesp__at__device__ops__struct_1a47a7d00395abf3169c4b5340abba675b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>(*get_data_length)(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="structesp__at__device__ops__struct_1ac92c859a2b00186aba13a21ec15933ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>(*wait_write_complete)(int32_t<sp/>timeout_msec);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal">}<sp/><ref refid="structesp__at__device__ops__struct" kindref="compound">esp_at_device_ops_struct</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structesp__at__custom__net__ops__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="64" refid="structesp__at__custom__net__ops__struct_1a1c4a95a75c1a52b6fe46e007b50adfdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>(*recv_data)(uint8_t*data,int32_t<sp/>len);<sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="structesp__at__custom__net__ops__struct_1a1d8e5e7d42384b4fb5fc53093a7bd7af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*connect_cb)(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="structesp__at__custom__net__ops__struct_1a74e1ad07c7d30f7b9e6b7938d97ef6f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*disconnect_cb)(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}<sp/><ref refid="structesp__at__custom__net__ops__struct" kindref="compound">esp_at_custom_net_ops_struct</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structesp__at__custom__ble__ops__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75" refid="structesp__at__custom__ble__ops__struct_1ad60e7b9cb82a1d48a1edf9d0739a8798" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>(*recv_data)(uint8_t*data,int32_t<sp/>len);<sp/><sp/></highlight></codeline>
<codeline lineno="76" refid="structesp__at__custom__ble__ops__struct_1ab992ce45e9b42c5d86f2f9e8e9650dd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*connect_cb)(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="structesp__at__custom__ble__ops__struct_1ac2cb6ed2b4b69179bba5ec1273edb8b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*disconnect_cb)(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}<sp/><ref refid="structesp__at__custom__ble__ops__struct" kindref="compound">esp_at_custom_ble_ops_struct</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_STATUS_NORMAL<sp/>=<sp/>0x0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_STATUS_TRANSMIT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/>esp_at_status_type;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structesp__at__custom__ops__struct" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="97" refid="structesp__at__custom__ops__struct_1ada4e9ba305ea2b33ae28472a8e287094" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*status_callback)<sp/>(esp_at_status_type<sp/>status);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98" refid="structesp__at__custom__ops__struct_1a73fd7c5f2de813cbaabdc10d2d6683d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*pre_deepsleep_callback)<sp/>(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="structesp__at__custom__ops__struct_1ab5ff9ea73058e1b32fba145c26c8bf94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*pre_restart_callback)<sp/>(void);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><ref refid="structesp__at__custom__ops__struct" kindref="compound">esp_at_custom_ops_struct</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*esp_at_port_specific_callback_t)<sp/>(void);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>number</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_MODULE_NUM<sp/>=<sp/>0x01</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/>esp_at_module;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_COMMON_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_NO_TERMINATOR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_NO_AT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_PARA_LENGTH_MISMATCH<sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_PARA_TYPE_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_PARA_NUM_MISMATCH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_PARA_INVALID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x07,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_PARA_PARSE_FAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_UNSUPPORT_CMD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x09,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_CMD_EXEC_FAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0A,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_CMD_PROCESSING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0B,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_SUB_CMD_OP_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0C,</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}<sp/>esp_at_error_code;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_ERROR_NO(subcategory,extension)<sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ESP_AT_MODULE_NUM<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((subcategory)<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(extension))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_OK,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_NON_FINISH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_NO_TERMINATOR,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_NOT_FOUND_AT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_NO_AT,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_PARA_LENGTH(which_para)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_LENGTH_MISMATCH,which_para)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_PARA_TYPE(which_para)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_TYPE_MISMATCH,which_para)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_PARA_NUM(need,given)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_NUM_MISMATCH,(((need)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(given)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_PARA_INVALID(which_para)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_INVALID,which_para)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_PARA_PARSE_FAIL(which_para)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_PARA_PARSE_FAIL,which_para)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_CMD_UNSUPPORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_UNSUPPORT_CMD,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_CMD_EXEC_FAIL(result)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_EXEC_FAIL,result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_CMD_PROCESSING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_PROCESSING,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_AT_CMD_ERROR_CMD_OP_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_AT_ERROR_NO(ESP_AT_SUB_CMD_OP_ERROR,0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_PARA_PARSE_RESULT_FAIL<sp/>=<sp/>-1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_PARA_PARSE_RESULT_OK<sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_PARA_PARSE_RESULT_OMITTED,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/>esp_at_para_parse_result_type;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_OK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_FAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_SEND_OK<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_SEND_FAIL<sp/><sp/><sp/><sp/>=<sp/>0x04,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_IGNORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_PROCESS_DONE<sp/>=<sp/>0x06,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_AT_RESULT_CODE_MAX</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/>esp_at_result_code_string_index;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_module_init(uint32_t<sp/>netconn_max,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*custom_version);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">esp_at_para_parse_result_type<sp/>esp_at_get_para_as_digit(int32_t<sp/>para_index,<sp/>int32_t<sp/>*value);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">esp_at_para_parse_result_type<sp/>esp_at_get_para_as_str(int32_t<sp/>para_index,<sp/>uint8_t<sp/>**result);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_port_recv_data_notify_from_isr(int32_t<sp/>len);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_port_recv_data_notify(int32_t<sp/>len,<sp/>uint32_t<sp/>msec);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_transmit_terminal_from_isr(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_transmit_terminal(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_custom_cmd_array_regist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structesp__at__cmd__struct" kindref="compound">esp_at_cmd_struct</ref><sp/>*custom_at_cmd_array,<sp/>uint32_t<sp/>cmd_num);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_device_ops_regist(<ref refid="structesp__at__device__ops__struct" kindref="compound">esp_at_device_ops_struct</ref>*<sp/>ops);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/>regist<sp/>custom<sp/>callback<sp/>about<sp/>socket<sp/>status,</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/>@param<sp/>link_id<sp/>the<sp/>link<sp/>id</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/>@param<sp/>ops<sp/>custom<sp/>operate<sp/>functions<sp/>set</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/>Note:<sp/>Make<sp/>sure<sp/>this<sp/>API<sp/>call<sp/>after<sp/>esp_at_module_init.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_custom_net_ops_regist<sp/>(int32_t<sp/>link_id,<ref refid="structesp__at__custom__net__ops__struct" kindref="compound">esp_at_custom_net_ops_struct</ref>*<sp/>ops);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/><sp/>@brief<sp/>regist<sp/>custom<sp/>callback<sp/>about<sp/>ble<sp/>status,</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/><sp/>@param<sp/>ops<sp/>custom<sp/>operate<sp/>functions<sp/>set</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/>Note:<sp/>Make<sp/>sure<sp/>this<sp/>API<sp/>call<sp/>after<sp/>esp_at_module_init.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_custom_ble_ops_regist(int32_t<sp/>conn_index,<sp/><ref refid="structesp__at__custom__ble__ops__struct" kindref="compound">esp_at_custom_ble_ops_struct</ref>*<sp/>ops);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_custom_ops_regist(<ref refid="structesp__at__custom__ops__struct" kindref="compound">esp_at_custom_ops_struct</ref>*<sp/>ops);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">uint32_t<sp/>esp_at_get_version(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_response_result(uint8_t<sp/>result_code);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">int32_t<sp/><sp/>esp_at_port_write_data(uint8_t<sp/>*data,<sp/>int32_t<sp/>len);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">int32_t<sp/>esp_at_port_read_data(uint8_t*data,int32_t<sp/>len);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_port_wait_write_complete(int32_t<sp/>timeout_msec);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">int32_t<sp/>esp_at_port_get_data_length(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_base_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_wifi_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_net_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="375"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_mdns_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_wps_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_smartconfig_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_ping_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_http_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_mqtt_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_ble_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_ble_hid_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_blufi_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_bt_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_bt_spp_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_bt_a2dp_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_fs_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_eap_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_eth_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_custom_cmd_line_terminator_set(uint8_t*<sp/>terminator);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">uint8_t*<sp/>esp_at_custom_cmd_line_terminator_get(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>esp_partition_t*<sp/>esp_at_custom_partition_find(esp_partition_type_t<sp/>type,<sp/>esp_partition_subtype_t<sp/>subtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>label);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>esp_at_eth_cmd_regist(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_port_enter_specific(esp_at_port_specific_callback_t<sp/>callback);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>esp_at_port_exit_specific(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>esp_at_get_current_cmd_name(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">esp_err_t<sp/>esp_at_wifi_event_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ctx,<sp/>system_event_t<sp/>*event);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/chenwu/esp/at/esp32-at/components/at/include/esp_at.h"/>
  </compounddef>
</doxygen>
